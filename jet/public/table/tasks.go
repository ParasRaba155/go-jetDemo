//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Tasks = newTasksTable("public", "tasks", "")

type tasksTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnString
	UserEmail postgres.ColumnString
	Name      postgres.ColumnString
	Details   postgres.ColumnString
	Status    postgres.ColumnBool
	CreatedAt postgres.ColumnTimestamp
	UpdatedAt postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TasksTable struct {
	tasksTable

	EXCLUDED tasksTable
}

// AS creates new TasksTable with assigned alias
func (a TasksTable) AS(alias string) *TasksTable {
	return newTasksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TasksTable with assigned schema name
func (a TasksTable) FromSchema(schemaName string) *TasksTable {
	return newTasksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TasksTable with assigned table prefix
func (a TasksTable) WithPrefix(prefix string) *TasksTable {
	return newTasksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TasksTable with assigned table suffix
func (a TasksTable) WithSuffix(suffix string) *TasksTable {
	return newTasksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTasksTable(schemaName, tableName, alias string) *TasksTable {
	return &TasksTable{
		tasksTable: newTasksTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newTasksTableImpl("", "excluded", ""),
	}
}

func newTasksTableImpl(schemaName, tableName, alias string) tasksTable {
	var (
		IDColumn        = postgres.StringColumn("id")
		UserEmailColumn = postgres.StringColumn("user_email")
		NameColumn      = postgres.StringColumn("name")
		DetailsColumn   = postgres.StringColumn("details")
		StatusColumn    = postgres.BoolColumn("status")
		CreatedAtColumn = postgres.TimestampColumn("created_at")
		UpdatedAtColumn = postgres.TimestampColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, UserEmailColumn, NameColumn, DetailsColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{UserEmailColumn, NameColumn, DetailsColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return tasksTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserEmail: UserEmailColumn,
		Name:      NameColumn,
		Details:   DetailsColumn,
		Status:    StatusColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
